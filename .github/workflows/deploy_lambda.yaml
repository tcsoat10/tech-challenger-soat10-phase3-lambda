name: Deploy Lambda Function

on:
  push:
    branches:
      - main
      - master
  workflow_dispatch:

env:
  REGION_DEFAULT: "us-east-1"

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install boto3 pytest pytest-cov
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          
      # - name: Run tests
      #   run: |
      #     python -m pytest tests/ -v --cov=./ --cov-report=xml
          
      - name: Package Lambda function
        run: |
          mkdir -p build
          cp -r *.py build/
          cp -r package build/ || echo "No package directory found"
          cd build
          zip -r ../lambda-package.zip .
          
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws_session_token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws_region: ${{ env.REGION_DEFAULT }}
          
      - name: Deploy to Lambda
        run: |
          aws lambda update-function-code \
            --function-name ${{ secrets.LAMBDA_FUNCTION_NAME }} \
            --zip-file fileb://lambda-package.zip
            
      - name: Update Lambda configuration
        run: |
          aws lambda update-function-configuration \
            --function-name ${{ secrets.LAMBDA_FUNCTION_NAME }} \
            --environment "Variables={USER_POOL_ID=${{ secrets.USER_POOL_ID }}}"
            
      # - name: Verify deployment
      #   run: |
      #     DEPLOYMENT_STATUS=$(aws lambda get-function \
      #       --function-name ${{ secrets.LAMBDA_FUNCTION_NAME }} \
      #       --query 'Configuration.LastUpdateStatus' \
      #       --output text)
      #     echo "Deployment status: $DEPLOYMENT_STATUS"
      #     if [ "$DEPLOYMENT_STATUS" != "Successful" ] && [ "$DEPLOYMENT_STATUS" != "InProgress" ]; then
      #       echo "Deployment failed with status: $DEPLOYMENT_STATUS"
      #       exit 1
      #     fi
